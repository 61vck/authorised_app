// Mocks generated by Mockito 5.3.2 from annotations
// in authorised_app/test/settings/settings_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:authorised_app/providers/settings_provider.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThemeData_0 extends _i1.SmartFake implements _i2.ThemeData {
  _FakeThemeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [SettingsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsProvider extends _i1.Mock implements _i3.SettingsProvider {
  @override
  List<_i2.Text> get language => (super.noSuchMethod(
        Invocation.getter(#language),
        returnValue: <_i2.Text>[],
        returnValueForMissingStub: <_i2.Text>[],
      ) as List<_i2.Text>);
  @override
  set language(List<_i2.Text>? _language) => super.noSuchMethod(
        Invocation.setter(
          #language,
          _language,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<bool> get selectedLanguage => (super.noSuchMethod(
        Invocation.getter(#selectedLanguage),
        returnValue: <bool>[],
        returnValueForMissingStub: <bool>[],
      ) as List<bool>);
  @override
  set selectedLanguage(List<bool>? _selectedLanguage) => super.noSuchMethod(
        Invocation.setter(
          #selectedLanguage,
          _selectedLanguage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ThemeData get theme => (super.noSuchMethod(
        Invocation.getter(#theme),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.getter(#theme),
        ),
        returnValueForMissingStub: _FakeThemeData_0(
          this,
          Invocation.getter(#theme),
        ),
      ) as _i2.ThemeData);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void changeLanguage(int? index) => super.noSuchMethod(
        Invocation.method(
          #changeLanguage,
          [index],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setLocale(_i4.Locale? locale) => super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [locale],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeTheme(bool? value) => super.noSuchMethod(
        Invocation.method(
          #changeTheme,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
